// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/22/2017 14:10:27"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          C642HDMI
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module C642HDMI_vlg_vec_tst();
// constants                                           
// general purpose registers
reg treg_adv7511_scl;
reg treg_adv7511_sda;
reg [7:0] atan_x;
reg [7:0] atan_y;
reg [7:0] atan_zero;
reg [3:0] BUTTON;
reg CLK50;
reg [15:0] GPI;
reg RST;
reg [9:0] SWITCH;
// wires                                               
wire adv7511_clk;
wire [23:0] adv7511_d;
wire adv7511_de;
wire adv7511_hs;
wire adv7511_scl;
wire adv7511_sda;
wire adv7511_vs;
wire [15:0] atan_d2;
wire [7:0] atan_phi;
wire [21:16] GPO;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [17:0] LED;

// assign statements (if any)                          
assign adv7511_scl = treg_adv7511_scl;
assign adv7511_sda = treg_adv7511_sda;
C642HDMI i1 (
// port map - connection between master ports and signals/registers   
	.adv7511_clk(adv7511_clk),
	.adv7511_d(adv7511_d),
	.adv7511_de(adv7511_de),
	.adv7511_hs(adv7511_hs),
	.adv7511_scl(adv7511_scl),
	.adv7511_sda(adv7511_sda),
	.adv7511_vs(adv7511_vs),
	.atan_d2(atan_d2),
	.atan_phi(atan_phi),
	.atan_x(atan_x),
	.atan_y(atan_y),
	.atan_zero(atan_zero),
	.BUTTON(BUTTON),
	.CLK50(CLK50),
	.GPI(GPI),
	.GPO(GPO),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.LED(LED),
	.RST(RST),
	.SWITCH(SWITCH)
);
initial 
begin 
#1000000 $finish;
end 
// atan_x[ 7 ]
initial
begin
	atan_x[7] = 1'b0;
	atan_x[7] = #10000 1'b1;
	atan_x[7] = #60000 1'b0;
	atan_x[7] = #40000 1'b1;
	atan_x[7] = #40000 1'b0;
	atan_x[7] = #60000 1'b1;
	atan_x[7] = #40000 1'b0;
end 
// atan_x[ 6 ]
initial
begin
	atan_x[6] = 1'b0;
	atan_x[6] = #150000 1'b1;
	atan_x[6] = #130000 1'b0;
end 
// atan_x[ 5 ]
initial
begin
	atan_x[5] = 1'b0;
	atan_x[5] = #70000 1'b1;
	atan_x[5] = #40000 1'b0;
	atan_x[5] = #40000 1'b1;
	atan_x[5] = #30000 1'b0;
	atan_x[5] = #30000 1'b1;
	atan_x[5] = #70000 1'b0;
end 
// atan_x[ 4 ]
initial
begin
	atan_x[4] = 1'b0;
	atan_x[4] = #70000 1'b1;
	atan_x[4] = #40000 1'b0;
	atan_x[4] = #100000 1'b1;
	atan_x[4] = #40000 1'b0;
end 
// atan_x[ 3 ]
initial
begin
	atan_x[3] = 1'b0;
	atan_x[3] = #10000 1'b1;
	atan_x[3] = #140000 1'b0;
	atan_x[3] = #60000 1'b1;
	atan_x[3] = #70000 1'b0;
end 
// atan_x[ 2 ]
initial
begin
	atan_x[2] = 1'b0;
	atan_x[2] = #10000 1'b1;
	atan_x[2] = #270000 1'b0;
end 
// atan_x[ 1 ]
initial
begin
	atan_x[1] = 1'b0;
	atan_x[1] = #180000 1'b1;
	atan_x[1] = #100000 1'b0;
end 
// atan_x[ 0 ]
initial
begin
	atan_x[0] = 1'b0;
	atan_x[0] = #210000 1'b1;
	atan_x[0] = #40000 1'b0;
end 
// atan_y[ 7 ]
initial
begin
	atan_y[7] = 1'b0;
	atan_y[7] = #40000 1'b1;
	atan_y[7] = #70000 1'b0;
	atan_y[7] = #100000 1'b1;
	atan_y[7] = #70000 1'b0;
end 
// atan_y[ 6 ]
initial
begin
	atan_y[6] = 1'b0;
	atan_y[6] = #10000 1'b1;
	atan_y[6] = #30000 1'b0;
	atan_y[6] = #70000 1'b1;
	atan_y[6] = #70000 1'b0;
	atan_y[6] = #30000 1'b1;
	atan_y[6] = #70000 1'b0;
end 
// atan_y[ 5 ]
initial
begin
	atan_y[5] = 1'b0;
	atan_y[5] = #10000 1'b1;
	atan_y[5] = #60000 1'b0;
	atan_y[5] = #40000 1'b1;
	atan_y[5] = #40000 1'b0;
	atan_y[5] = #60000 1'b1;
	atan_y[5] = #70000 1'b0;
end 
// atan_y[ 4 ]
initial
begin
	atan_y[4] = 1'b0;
	atan_y[4] = #70000 1'b1;
	atan_y[4] = #40000 1'b0;
	atan_y[4] = #100000 1'b1;
	atan_y[4] = #70000 1'b0;
end 
// atan_y[ 3 ]
initial
begin
	atan_y[3] = 1'b0;
	atan_y[3] = #10000 1'b1;
	atan_y[3] = #30000 1'b0;
	atan_y[3] = #140000 1'b1;
	atan_y[3] = #100000 1'b0;
end 
// atan_y[ 2 ]
initial
begin
	atan_y[2] = 1'b0;
	atan_y[2] = #10000 1'b1;
	atan_y[2] = #30000 1'b0;
	atan_y[2] = #30000 1'b1;
	atan_y[2] = #110000 1'b0;
	atan_y[2] = #30000 1'b1;
	atan_y[2] = #70000 1'b0;
end 
// atan_y[ 1 ]
initial
begin
	atan_y[1] = 1'b0;
	atan_y[1] = #10000 1'b1;
	atan_y[1] = #30000 1'b0;
	atan_y[1] = #30000 1'b1;
	atan_y[1] = #40000 1'b0;
	atan_y[1] = #40000 1'b1;
	atan_y[1] = #130000 1'b0;
end 
// atan_y[ 0 ]
initial
begin
	atan_y[0] = 1'b0;
	atan_y[0] = #210000 1'b1;
	atan_y[0] = #70000 1'b0;
end 
// atan_zero[ 7 ]
initial
begin
	atan_zero[7] = 1'b0;
end 
// atan_zero[ 6 ]
initial
begin
	atan_zero[6] = 1'b1;
end 
// atan_zero[ 5 ]
initial
begin
	atan_zero[5] = 1'b1;
end 
// atan_zero[ 4 ]
initial
begin
	atan_zero[4] = 1'b0;
end 
// atan_zero[ 3 ]
initial
begin
	atan_zero[3] = 1'b0;
end 
// atan_zero[ 2 ]
initial
begin
	atan_zero[2] = 1'b1;
end 
// atan_zero[ 1 ]
initial
begin
	atan_zero[1] = 1'b0;
end 
// atan_zero[ 0 ]
initial
begin
	atan_zero[0] = 1'b0;
end 
endmodule

